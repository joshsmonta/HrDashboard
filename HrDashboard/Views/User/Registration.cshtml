@model HrDashboard.Models.Users
@{ 
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>SonicHRS | Registration Page</title>
    <!-- Tell the browser to be responsive to screen width -->
    <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700,300italic,400italic,600italic">
    @Styles.Render("~/Css")
</head>
<body class="hold-transition register-page">
    <div class="register-box">
        <div class="register-logo">
            <a href="../../index2.html"><b>Sonic</b>HRS</a>
        </div>

        <div class="register-box-body">
            <p class="login-box-msg">Register a new membership</p>

            @if (ViewBag.Status != null && Convert.ToBoolean(ViewBag.Status))
            {
                if (ViewBag.Message != null)
                {
                    <div class="alert alert-warning">
                        <strong>Success!</strong>
                        @ViewBag.Message
                    </div>
                }
            }
            else
            {
                using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group has-feedback">
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Username" } })
                                <span class="glyphicon glyphicon-user form-control-feedback"></span>
                                @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group has-feedback">
                            <div class="col-md-12">
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Fullname" } })
                                <span class="glyphicon glyphicon-pencil form-control-feedback"></span>
                            </div>
                        </div>

                        <div class="form-group has-feedback">
                            <div class="col-md-12">
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                @Html.ValidationMessage("EmailExist", new { @class = "text-danger" })
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "E-mail" } })
                                <span class="glyphicon glyphicon-envelope form-control-feedback"></span>
                            </div>
                        </div>

                        <div class="form-group has-feedback">
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Create Password" } })
                                <span class="glyphicon glyphicon-lock form-control-feedback"></span>
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group has-feedback">
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Retype Passowrd" } })
                                <span class="glyphicon glyphicon-log-in form-control-feedback"></span>
                                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="form-inline">
                                    @Html.DropDownListFor(model => model.Roles, new SelectList(new string[] { "Admin", "Encoder", "Guest" }), "", new { @class = "form-control input-sm"})
                                    @Html.ValidationMessageFor(model => model.Roles, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-xs-4">
                                <button type="submit" class="btn btn-success btn-block btn-flat">Register</button>
                            </div>
                        </div>
                    </div>
                    if (ViewBag.Message != null)
                    {
                        <div class="alert alert-warning">
                            <strong>Error!</strong>
                            @ViewBag.Message
                        </div>
                    }
                }
            }

        </div>
        <!-- /.form-box -->
    </div>
    @Scripts.Render("~/Js")
</body>
</html>

